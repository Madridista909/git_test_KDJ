Git 이란?
- 파일의 버전을 관리할 수 있는 시스템, 프로그램
- svn 등 여러 버전 관리 (형상 관리) 프로그램이 있지만, 현재는 사실상 Git 이 대부분을 차지함

Git 을 이용해서 로컬에서만 버전을 관리할 수도 있지만, github 라는 온라인 서비스를 이용해서 클라우드 상에 올려서 공유하거나 백업하는 용도로도 사용할 수 있음

백업의 목적으로 깃을 배워보자

깃의 시작은 저장소를 만드는 것

git init
- 파일이 있는지 여부와 무관하게 해당 폴더를 저장소로 만들고자 할 때 사용하는 명령어
- git init 을 사용하면 .git 이라는 숨김폴더가 생성됨
   해당 폴더에는 파일 변경 이력, 기록이 저장됨

현재 저장소의 변경사항을 확정할 때, 진행자의 정보를 입력해주어야 함

이를 "사용자 설정" 이라 부르며, 모든 위치에서 설정을 공유하는 방법과 해당 저장소에만 적용하는 방법이 존재함
================================================================================================
git config [--local | --global]
user.name "유저명"

위 명령어에서 --local 혹은 --global 중 하나를 선택해서 설정할 수 있으며, 

--local
- 현재 저장소에만 변경사항을 적용

--golbal
- 모든 저장소에서 변경사항을 적용

user.name 은 변경사항을 확정한 주체가 누구인지를 나타내는 닉네임
================================================================================================
git config --local user.email "email@email.com"

user.email 도 설정해주어야 하며, 만약 해당 이메일이 깃허브에 등록되어있다면, 깃허브에서 확인했을 때 프로필이 적용되어 나타남
================================================================================================
버전을 확정 짓기 전에 어떤 파일의 변경사항을 버전에 추가할지 정해주어야 함
이를 staging 이라 하며, staging 된 파일 변경사항을 버전으로 확정 짓는 것을 commit 이라 함

commit 을 하려면 먼저 staging 이 이루어져야 함

# staging
- 파일을 버전의 대상으로 삼으려면

git add 파일명
- 위 명령어로 stage 에 파일 변경 사항을 올려야 함

git add .
- 위 명령어는 확인된 변경사항이 있는 파일들을 모두 staging 하겠다는 명령어이다

#commit
- staging 이 끝났다면 버전 확정 필요
- 이때, 버전을 확정지으면서 메시지 작성 가능

git commit -m "남길 메시지"
이때 m 은 반드시 소문자로 작성

남길 메시지는 커밋 메시지라고 하여, 해당 버전에 대해 어떤 변경사항이 존재하는지 간단히 남기는 정도로 작성
========================로컬에서의 버전 관리=========================================

========================깃허브에 백업하기===========================================
















